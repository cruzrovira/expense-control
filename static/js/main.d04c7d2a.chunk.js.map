{"version":3,"sources":["components/budget.js","components/expense.js","components/expenseList.js","components/control.js","App.js","serviceWorker.js","index.js"],"names":["BudgetStyled","styled","form","Budget","addBuget","useState","error","setError","amountRef","useRef","onSubmit","e","preventDefault","amount","current","value","trim","isNaN","focus","addmount","htmlFor","type","id","ref","className","ExpenseStyled","Expense","addExpenseList","descriptionRef","description","uuidv4","parseFloat","ExpenseListStyled","div","ExpenseList","expenseList","budget","totalExpense","map","expense","key","ControlStyled","Control","AppStyled","App","setBuget","setExpenseList","setTotalExpense","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d04c7d2a.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BudgetStyled = styled.form`\r\n  background: #fafdff;\r\n  padding: 10px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  max-width: 600px;\r\n  margin: auto;\r\n  h2 {\r\n    text-align: center;\r\n    margin: 0;\r\n    color: #007bdf;\r\n  }\r\n  input[type=\"text\"] {\r\n    width: 100%;\r\n    line-height: 2rem;\r\n    outline: none;\r\n    border: 1px solid #007bdf;\r\n    margin: 10px 0 10px 0;\r\n  }\r\n  input[type=\"submit\"] {\r\n    width: 6em;\r\n    border: none;\r\n    outline: none;\r\n    background: #007bdf;\r\n    color: #fafdff;\r\n    line-height: 2rem;\r\n    cursor: pointer;\r\n  }\r\n  input[type=\"submit\"]:active {\r\n    transform: scale(0.8);\r\n  }\r\n  .error {\r\n    background: #ff3c32;\r\n    color: #fafdff;\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst Budget = ({ addBuget }) => {\r\n  let [error, setError] = useState(null);\r\n\r\n  let amountRef = useRef();\r\n\r\n  const addmount = (e) => {\r\n    e.preventDefault();\r\n    let amount = amountRef.current.value.trim();\r\n\r\n    //validate\r\n    if (amount === \"\") {\r\n      setError(\"Required item\");\r\n      return;\r\n    }\r\n    setError(null);\r\n\r\n    if (isNaN(amount)) {\r\n      amountRef.current.value = \"\";\r\n      amountRef.current.focus();\r\n      setError(\"Must be numeric\");\r\n      return;\r\n    }\r\n    setError(null);\r\n\r\n    amountRef.current.value = \"\";\r\n    amountRef.current.focus();\r\n    addBuget(amount);\r\n  };\r\n  return (\r\n    <BudgetStyled onSubmit={(e) => addmount(e)}>\r\n      <h2>Budget</h2>\r\n      <label htmlFor=\"amount\">Total Amount:*</label>\r\n      <input type=\"text\" id=\"amount\" ref={amountRef} />\r\n      <input type=\"submit\" value=\"Send\" />\r\n      {error ? <p className=\"error\"> {error} </p> : null}\r\n    </BudgetStyled>\r\n  );\r\n};\r\n\r\nexport default Budget;\r\n","import React, { useState, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst ExpenseStyled = styled.form`\r\n  background: #fafdff;\r\n  padding: 10px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  max-width: 600px;\r\n  margin: auto;\r\n  h2 {\r\n    text-align: center;\r\n    margin: 0;\r\n    color: #007bdf;\r\n  }\r\n  input[type=\"text\"] {\r\n    width: 100%;\r\n    line-height: 2rem;\r\n    outline: none;\r\n    border: 1px solid #007bdf;\r\n    margin: 10px 0 10px 0;\r\n  }\r\n  input[type=\"submit\"] {\r\n    width: 6em;\r\n    border: none;\r\n    outline: none;\r\n    background: #007bdf;\r\n    color: #fafdff;\r\n    line-height: 2rem;\r\n    cursor: pointer;\r\n  }\r\n  input[type=\"submit\"]:active {\r\n    transform: scale(0.8);\r\n  }\r\n  .error {\r\n    background: #ff3c32;\r\n    color: #fafdff;\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst Expense = ({ addExpenseList }) => {\r\n  // create State\r\n  let [error, setError] = useState(null);\r\n  // create Ref\r\n  let descriptionRef = useRef();\r\n  let amountRef = useRef();\r\n\r\n  const add = (e) => {\r\n    e.preventDefault();\r\n    let description = descriptionRef.current.value.trim();\r\n    let amount = amountRef.current.value.trim();\r\n\r\n    //validate\r\n    if (description === \"\") {\r\n      setError(\"Required description\");\r\n      descriptionRef.current.focus();\r\n      return;\r\n    }\r\n    setError(\"\");\r\n\r\n    if (amount === \"\") {\r\n      setError(\"Required Amount\");\r\n      descriptionRef.current.focus();\r\n      return;\r\n    }\r\n    setError(\"\");\r\n\r\n    if (isNaN(amount)) {\r\n      amountRef.current.value = \"\";\r\n      amountRef.current.focus();\r\n      setError(\"Must be numeric\");\r\n      return;\r\n    }\r\n    setError(null);\r\n    addExpenseList({ id: uuidv4(), description, amount: parseFloat(amount) });\r\n\r\n    descriptionRef.current.value = \"\";\r\n    amountRef.current.value = \"\";\r\n    descriptionRef.current.focus();\r\n  };\r\n  return (\r\n    <ExpenseStyled onSubmit={add}>\r\n      <h2>Add Expense</h2>\r\n      <label htmlFor=\"description\">Description:*</label>\r\n      <input type=\"text\" id=\"description\" ref={descriptionRef} />\r\n      <label htmlFor=\"amount\">Amount:*</label>\r\n      <input type=\"text\" id=\"amount\" ref={amountRef} />\r\n      <input type=\"submit\" value=\"Send\" />\r\n      {error ? <p className=\"error\"> {error} </p> : null}\r\n    </ExpenseStyled>\r\n  );\r\n};\r\n\r\nexport default Expense;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ExpenseListStyled = styled.div`\r\n  background: #fafdff;\r\n  padding: 10px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  max-width: 600px;\r\n  margin: auto;\r\n  h2 {\r\n    text-align: center;\r\n    margin: 0;\r\n    color: #007bdf;\r\n  }\r\n  .row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  p {\r\n    border-bottom: 1px solid #007bdf;\r\n  }\r\n\r\n  .warning {\r\n    border-bottom: 1px solid orange;\r\n  }\r\n  .danger {\r\n    border-bottom: 1px solid red;\r\n  }\r\n`;\r\n\r\nconst ExpenseList = ({ expenseList, budget, totalExpense }) => {\r\n  return (\r\n    <ExpenseListStyled>\r\n      <h2>Expense List</h2>\r\n      {expenseList.map((expense) => (\r\n        <p className=\"row\" key={expense.id}>\r\n          <span>{expense.description}</span> <span>{expense.amount}</span>\r\n        </p>\r\n      ))}\r\n      <p className=\"row\">\r\n        <span>Total Budget:</span>\r\n        <span>{budget}</span>\r\n      </p>\r\n\r\n      {totalExpense > budget * 0.75 ? (\r\n        <p className=\"row danger\">\r\n          <span>Total Expense:</span>\r\n          <span>{totalExpense}</span>\r\n        </p>\r\n      ) : totalExpense > budget * 0.45 ? (\r\n        <p className=\"row warning\">\r\n          <span>Total Expense:</span>\r\n          <span>{totalExpense}</span>\r\n        </p>\r\n      ) : (\r\n        <p className=\"row\">\r\n          <span>Total Expense:</span>\r\n          <span>{totalExpense}</span>\r\n        </p>\r\n      )}\r\n    </ExpenseListStyled>\r\n  );\r\n};\r\n\r\nexport default ExpenseList;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Expense from \"./expense\";\r\nimport ExpenseList from \"./expenseList\";\r\nconst ControlStyled = styled.div`\r\n  .item {\r\n    margin-bottom: 15px;\r\n  }\r\n  @media screen and (min-width: 600px) {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .item {\r\n      width: 45%;\r\n      margin-bottom: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Control = ({ addExpenseList, expenseList, budget, totalExpense }) => {\r\n  return (\r\n    <ControlStyled>\r\n      <div className=\"item\">\r\n        <Expense addExpenseList={addExpenseList} />\r\n      </div>\r\n      <div className=\"item\">\r\n        <ExpenseList\r\n          expenseList={expenseList}\r\n          budget={budget}\r\n          totalExpense={totalExpense}\r\n        />\r\n      </div>\r\n    </ControlStyled>\r\n  );\r\n};\r\n\r\nexport default Control;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Budget from \"./components/budget\";\nimport Control from \"./components/control\";\nconst AppStyled = styled.div`\n  .container {\n    width: 80%;\n    max-width: 1024px;\n    margin: auto;\n  }\n  h1 {\n    color: #fafdff;\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 4px;\n  }\n`;\n\nconst App = () => {\n  let [budget, setBuget] = useState(0);\n  let [expenseList, setExpenseList] = useState([]);\n  let [totalExpense, setTotalExpense] = useState(0);\n\n  const addBuget = (amount) => {\n    setBuget(amount);\n  };\n  const addExpenseList = (expense) => {\n    setExpenseList([...expenseList, expense]);\n    setTotalExpense(totalExpense + expense.amount);\n  };\n  return (\n    <AppStyled>\n      <div className=\"container\">\n        <h1>expense control</h1>\n        {budget ? (\n          <Control\n            addExpenseList={addExpenseList}\n            expenseList={expenseList}\n            budget={budget}\n            totalExpense={totalExpense}\n          />\n        ) : (\n          <Budget addBuget={addBuget} />\n        )}\n      </div>\n    </AppStyled>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}